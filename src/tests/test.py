from operator import mul


from fractions import gcd
from multiprocessing import Pool
from itertools import repeat 
from numpy.polynomial.polynomial import polyadd, polymul, polydiv
from polynomial import Polynomial
from random import randint

# log
import logging
logger = logging.getLogger("crt")

# Return True if a and b are coprimes
def is_coprime(a, b):
    return gcd(a, b) == 1

def is_a_valid_coprime(a, coprimes):
	for i in coprimes:
		if is_coprime(a, i) is False:
			return False
	return True


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def crt_partial(x):
	p, coprime = x

	return p % coprime

class CRT:

	# 
	# Receives the upper bound for messages
	# Receives how many bits the highest coprime should have
	# 
	def __init__(self, bound, crtsize = 32):
		self.__generate_primes(bound, crtsize)
		self.pool = Pool()

	def encode(self, p):
		# assert type(p) in [list, tuple]

		# return self.pool.map(crt_partial, zip(repeat(p), self.coprimes))
		x = []
		for pi in self.coprimes:
			x.append(p % pi)
		return x


	def decode(self, p):
	
		result = Polynomial()
		for i,pi in enumerate(self.coprimes):
			Mpi = self.M/pi
			invMpi = modinv(Mpi,pi)
			assert Mpi*invMpi % pi == 1
			
			aux = (Mpi*(invMpi*p[i] % pi))
			result = result + aux
		
		result = result % self.M
		return result

	#
	# Receives the upper bound for messages
	# Receives how many bits the highest coprime should have
	def __generate_primes(self, bound, crtsize):
		assert type(crtsize) in [int, long]
		assert type(bound) in [int, long]

		self.M = 1
		self.coprimes = []

		i = pow(2, crtsize)
		while self.M < bound:
			if is_a_valid_coprime(i, self.coprimes):
				self.coprimes.append(i)
				self.M = self.M*i
			i = i - 1

def centralize_reduce(a, Z):
	a.coef = [x if x < Z/2 else x - Z for x in a.coef] 
	return a

def fast_b_conv(x, q, b, mtil):
	Q = reduce(mul, q)
	r = [Polynomial()]*len(b)
	for i in range(len(b)):
		for j in range(len(x)):
			r[i] = (r[i] + (x[j]*mtil*modinv(Q/q[j], q[j]) % q[j]) * (Q/q[j])) % b[i]
	return r

def fast_b_conv_2(x, q, b):
	Q = reduce(mul, q)
	r = [Polynomial()]*len(b)
	# import pdb;pdb.set_trace()
	for i in range(len(b)):
		for j in range(len(q)):
			r[i] = (r[i] + (x[j]*modinv(Q/q[j], q[j]) % q[j]) * (Q/q[j])) % b[i]
	return r	

def SmMRq( cll, q, bsk, mtil):
	Q = reduce(mul, q)
	cllmtil = cll[-1] # residue related to mtil
	rmtil = -cllmtil * modinv(Q, mtil) % mtil
	# rmtil.coef = [x if x < mtil/2 else x - mtil for x in rmtil.coef] # || to []
	rmtil = centralize_reduce(rmtil, mtil)# || to []
	
	cl = [Polynomial()]*(len(cll)-1)
	for i, m in enumerate(bsk):
		cl[i] = (cll[i] + Q*rmtil)*modinv(mtil, m) % m

	return cl   

def t_mul_fast_rns_floor(aq, absk, t, b, msk, q):
	bsk = (b + [msk])
	absk_fast = fast_b_conv_2(aq, q, bsk)
	Q = reduce(mul, q)

	absk_floor = [(x[0] - x[1])*modinv(Q, bsk[i]) % bsk[i] for i, x in enumerate(zip(absk, absk_fast))]

	return absk_floor


def fast_b_conv_sk(x, b, msk, q):
	# import pdb;pdb.set_trace()
	M = reduce(mul, b)
	y = fast_b_conv_2(x, b, q)
	x_fast_sk = fast_b_conv_2(x, b, [msk])[0]
	x_sk = x[-1]
	alpha = (x_fast_sk - x_sk)*modinv(M, msk) % msk
	alpha = centralize_reduce(alpha, msk)
	print "alpha: %s" % alpha
	return [(y[i] - alpha*M) % q[i] for i in range(len(q))]


phi = Polynomial()
phi.set_dth_cyclotomic(32)

crt = CRT(2**64, crtsize=11)
crt.coprimes = [2029,2027,2017,2011,2003,1999,1997,1993,1987,1979,1973,1951,1949,1933,1931,1913,1907]
# crt.coprimes = [2029, 2027, 2017, 2011]
q = crt.coprimes
Q = reduce(mul, q)
crt.M = Q
mtil = 512
b = [1901,1889,1879,1877,1873,1871,1867,1861,1847,1831,1823,1811,1801,1789,1787,1783,1777]
# b = [2003, 1999, 1997, 1993]
# msk = 4010065903
msk = 1068433409
msk = 131071
t = 1024
bsk = b + [msk]

# print "q: %s => %d" % (q, Q)
# print "b: %s => %d" % (b, reduce(mul, b))
# print "msk: %d, mtil: %d, t: %d" % (msk, mtil, t)
# print ""

# # a = Polynomial(coef=[randint(8101057,8101057*2) for _ in range(10)])
# # a = Polynomial(coef=[randint(t/2, t) for _ in range(10)])
# a = Polynomial(76941097683874019481834557240789469409400148892186327076L, 75241394772407171767778084061495280407020669790115339713L, 46629941683884516220181862253501060670889296921273665561L, 15339237851259960065174630829482410242597222964261574916L, 60688484063692027993547909032702477985046381587155125525L, 60842633737751757186529852325396267497419445478271037579L, 23879901132265730936965018404251129535839577309373633145L, 12164278060572263549331781232676618575858276548004748799L, 89006937774608918485487649649256976303557665708662513169L, 73682711777496203416704763555924325366735823301642003834L, 13198091325580198271028516127552171247084444762942576909L, 95749114067179221794718003336660641042166908296278221147L, 28743233756173676391978010647659836997053853818649820673L, 62247474758140837810917129202110712184273448177934086776L, 51759731983615781918037396286892566864700225788971614302L, 102024822223507695962492443857716589767129410915695206777L)
# # a = Polynomial(47, 46, 52, 47, 42, 52, 48, 47, 49, 48, 50, 45, 50, 49, 47, 48, 53, 50, 50, 46, 47, 55, 51, 42, 46, 48, 51, 51, 45, 45, 52, 43)
# a = centralize_reduce(a, Q)
# print "a: %s" % a
# print ""
# x = crt.encode(a)
# print crt.decode(crt.encode(a)) == a

# ##########################
# cll = fast_b_conv(x, q, bsk + [mtil], mtil)
# cl = SmMRq(cll, q, bsk, mtil) # Bsk

# ##########################
# # cl % bi == a % bi
# for i, bi in enumerate(bsk):
# 	print a % bi == cl[i]
# # sk = fast_b_conv_sk(x, b, msk, q)
# # print x == sk

# # t*cl % bi == t*a % bi
# tcl = [t*k % bsk[i] for i,k in enumerate(cl)]
# for i, bi in enumerate(bsk):
# 	print t*a % bi == tcl[i] % bi

# ##########################
# tclDivq = t_mul_fast_rns_floor([t*k % q[i] for i, k in enumerate(x)], tcl, t, b, msk, q) # Compute t*cl / q mod Bsk
# print tclDivq
# txq = fast_b_conv_sk(tclDivq, b, msk, q)
# print txq

# print ""
# # print "Got: %s" % txq
# print "Got: %s" % (crt.decode(txq) % Q)
print "Expected: %s" % ([k / Q for k in a*t])

##
## { item_description }
##
sk = Polynomial(106795392809334650183117080768896917248673289501908668630, 1, 106795392809334650183117080768896917248673289501908668630, 106795392809334650183117080768896917248673289501908668630, 1, 106795392809334650183117080768896917248673289501908668630, 106795392809334650183117080768896917248673289501908668630, 1, 106795392809334650183117080768896917248673289501908668630, 106795392809334650183117080768896917248673289501908668630, 1, 0, 1, 0, 1, )
pka = Polynomial(28252807385789568556310376150684780521787499854148726870, 83893354719720720108803613645608029208111352151243729204, 29129149935203090044570086875329001359268276777109965912, 41000323710858379781229178298214667478279928188673669080, 41378773334964068300438264581019320839270398912099569895, 61999328182047266851845123671796752639452087618182303372, 32559841511588727159854865755836771107078165101131163876, 86301355458043783964079064384299062547164269047458139195, 99946945885209443004381741175147887524721573457703969248, 91799220607868456959114166023678066239352679420557184889, 18946375938633601382054137077845724834302672920446566207, 76070917333207351074090263886019150834663093011793340086, 23812568569573128114001936554163645168604375214795272862, 77129906730980204142714795521019613761088236054449516739, 29640021920714244672705288476866898818098221357118368832, 66672551920205197936444630953741484478058141687515106480, )
pkb = Polynomial(32364782807738259013826117142151648642054760620295759110, 59871003927051216096794590147378854131786251478730623167, 81519871629029834352334687893744164564043060524006396960, 39224353076698710589459356307312264176043254057839036911, 10739764406617333824918749543218804085676126558231328237, 44510576448954173118423225742439369734260261753029834426, 24974350588928728265449288109456210084960706677080281607, 29190281424874872789759796646733643279048568298580708267, 87041327606683679257187160471218232378988638690993461485, 6802057473428057349813944402259636496718667568439233254, 67844895109334913620136508675868203095148375887829802747, 25402147937801992649518530165320506247093619780142209285, 70039332330787670802279309392946584152258179443341629347, 41790060045012204166810099435593983759947393629430154039, 27895082417259651262709580184414751220415552113660449724, 4670928985135694165208387116930981632322283661637570419, )

ct10 = Polynomial(-51428467229193838293846419758212610427445655270876908528L, -15975698924967360099116359632521423798012646956188760691L, 47322302066948046823876609332573643397542855510300598519L, 41776869214002831946784698077028023965273149113887220461L, 5660267931972822188961210777454540633663277910593624288L, -45233809306561426221770437310485811377374879336835054075L, -19513685784790870420584131944273062426374238395626303877L, -10381720867862476527455450148397446533753804535155124871L, -35946063424365256435334759286112401657543041097489811163L, -8889905976671351955515121145936749430094049006798237133L, 28836250762381527581664480817114997896115396173416565283L, -11723895614857522005920614605317773278005306590855754567L, 10541515835896640355351191522930010813335492544399869283L, -29793050029351382716302783930306513006719544515466758026L, 19391983598488319102896184029906838907436216964362384263L, -19208432186778206494703165438595462972345762483101610230L)
ct20 = Polynomial(-17929205841574770921266722291183432693574904793239063501L, -27341990479589615142598422273292086457940554592494105327L, 52963090390305416967365379591044902550867349674617905754L, 43733056326271023584279613040813363827145609184728378922L, -26950753040380014750713032078173586760917205926412740627L, -7236855070041003339729584721966022477980833879377877925L, 31707505301011846713148730424424556393879806859010060767L, 49086814046117833454842921440378563961677144424751164814L, -9558970118855282722024998917566828529563089025527767219L, -5472606713420782298463349089699762828893480607975249371L, 50759660733863897572913314594415222624890682537293754546L, 43678545426196751996146148381678251504955627979019973062L, -18495014994055665014427802425017704618661123062703266434L, -38118993024727079790273272673503268648635850880784933156L, -20700093990728535800980352825349707427941148819534305925L, -53125584129999132403810406178446700733294884998522633043L)

# ct10 = Polynomial(23543401279206694390276016856341010785063504141231992761, 21843698367739846676219543677046821782684025039161005398, 46629941683884516220181862253501060670889296921273665561, 15339237851259960065174630829482410242597222964261574916, 7290787659024702901989368648254019360709736836200791210, 7444937333084432094971311940947808873082800727316703264, 23879901132265730936965018404251129535839577309373633145, 12164278060572263549331781232676618575858276548004748799, 35609241369941593393929109264808517679221020957708178854, 20285015372828878325146223171475866742399178550687669519, 13198091325580198271028516127552171247084444762942576909, 42351417662511896703159462952212182417830263545323886832, 28743233756173676391978010647659836997053853818649820673, 8849778353473512719358588817662253559936803426979752461, 51759731983615781918037396286892566864700225788971614302, 48627125818840370870933903473268131142792766164740872462)
# ct20 = Polynomial(2325195358248602029753566519608672137775821512872494877, 48946362641145435580531228784422405179655131447481165934, 48933949537353495481226458042035021064870394710737291203, 1119488, 42307754269468485720074037965861410368959100462401860503, 16284476232859523233775224632394297488689093162664952243, 671503549599344649176850216520725934060553761516740396, 12566224395805952, 9197684187744577373293134787520993151334868008790970449, 40750484290297509065463223416969098660358372634103187543, 18832921534997781417083222749321546258210055065297925110, 11181707629106368511013376, 17671141537141689455192673411380435188713878782899546976, 13316227723988065445255085937231154202828163943700291801, 40545578840227344104883715155320760880730377294651114750, 137394710219098925515025086951552512)
# ct11 = Polynomial(26350441578575194629923068018021882071424151950589963908, 42451936805463498361786033852615826217059518516144465713, 49374713573088695035221340200388400629755145538325475199, 19332829260806208946678228629870754665938290899250795801, 12407998534857564841386520325592311982546381880376343023, 1429259705431517588385338781786831748126098899056586813, 51515638191265809879169839945770165344818400366866547085, 9758600010836536084880792408115505288503009813586017235, 45038826448646070853507198372552025524110541829822358107, 45515389951330416695834477741789949438536969866788263061, 14031684883759155370184753738049031080910515168968983268, 36442732521082652697960349937132189751911466910505008785, 37386563406720630864352735780607320530817385043887455719, 51075743003165655214064026970324912810791738683332674705, 50828199748088809606046497772194587014646950658179167441, 34867290861280924816810924234763461570207614934269319168)
# ct21 = Polynomial(18573820121591047880070637601370673995991456658551799238, 21326650617271805491051681273483843610245248514074091766, 41474695370183023792851286186822341778021968131011329488, 17442816, 49354821693860860097717031961355297202757310359239357118, 5969538455454118979761415589627189276518375105270031921, 2235220510652299714885678355399101326240332943718860001, 1135562781358113536, 7760600817289534628557687156198150965988164129097748823, 50199100792560121296896314327006951481444177768701962714, 5797349527402051863705705868184406572313716816150829696, 91226427292163271610796288, 25523667539098179059702184055136684190504990640791729858, 38540798415449017784931373535081253424793363728344150116, 39483074817774629364061201640902333299227820563067572770, 2073190126233602075554004433714254848)

# ct10 = Polynomial(55366925580140811889270661010684306821227634231031760103L, 90819693884367290084000721136375493450660642545719907940L, 47322302066948046823876609332573643397542855510300598519L, 41776869214002831946784698077028023965273149113887220461L, 5660267931972822188961210777454540633663277910593624288L, 61561583502773223961346643458411105871298410165073614556L, 87281707024543779762532948824623854822299051106282364754L, 96413671941472173655661630620499470714919484966753543760L, 70849329384969393747782321482784515591130248404418857468L, 97905486832663298227601959622960167818579240495110431498L, 28836250762381527581664480817114997896115396173416565283L, 95071497194477128177196466163579143970667982911052914064L, 10541515835896640355351191522930010813335492544399869283L, 77002342779983267466814296838590404241953744986441910605L, 19391983598488319102896184029906838907436216964362384263L, 87586960622556443688413915330301454276327527018807058401L)
# ct20 = Polynomial(88866186967759879261850358477713484555098384708669605130L, 79453402329745035040518658495604830790732734909414563304L, 52963090390305416967365379591044902550867349674617905754L, 43733056326271023584279613040813363827145609184728378922L, 79844639768954635432404048690723330487756083575495928004L, 99558537739293646843387496046930894770692455622530790706L, 31707505301011846713148730424424556393879806859010060767L, 49086814046117833454842921440378563961677144424751164814L, 97236422690479367461092081851330088719110200476380901412L, 101322786095913867884653731679197154419779808893933419260L, 50759660733863897572913314594415222624890682537293754546L, 43678545426196751996146148381678251504955627979019973062L, 88300377815278985168689278343879212630012166439205402197L, 68676399784607570392843808095393648600037438621123735475L, 86095298818606114382136727943547209820732140682374362706L, 53669808679335517779306674590450216515378404503386035588L)

A = ct10 % phi % Q
B = ct20 % phi % Q
C = t * A * B / Q  % phi % Q

A = centralize_reduce(A, Q)
B = centralize_reduce(B, Q)
# C = centralize_reduce(C, Q)
x = crt.encode(A)
y = crt.encode(B)
print crt.decode(crt.encode(A)) == A
print crt.decode(crt.encode(B)) == B
bsk = b + [msk]

##########################
cll1 = fast_b_conv(x, q, bsk + [mtil], mtil)
cl1 = SmMRq(cll1, q, bsk, mtil) # Bsk
cll2 = fast_b_conv(y, q, bsk + [mtil], mtil)
cl2 = SmMRq(cll2, q, bsk, mtil) # Bsk

##########################
# cl % bi == a % bi
for i, bi in enumerate(bsk):
	print A % bi == cl1[i]
for i, bi in enumerate(bsk):
	print B % bi == cl2[i]

TC_q = [t * z[0] * z[1] % phi % q[i] for i, z in enumerate(zip(x, y))]
TC_bsk = [t * z[0] * z[1] % phi % bsk[i] for i, z in enumerate(zip(cl1, cl2))]
# t*cl % bi == t*a % bi
for i, bi in enumerate(bsk):
	print t*A*B % phi % bi == TC_bsk[i] % bi

##########################
tclDivq = t_mul_fast_rns_floor(TC_q, TC_bsk, t, b, msk, q) # Compute t*cl / q mod Bsk
print "tclDivq: %s " % tclDivq
txq = fast_b_conv_sk(tclDivq, b, msk, q)
print "txq: %s " % txq
t_got = (crt.decode(txq) % Q)
print "Got: %s" % t_got
print "Expected: %s" % (C)
print [z[0] - z[1] for z in zip(t_got.coef, C.coef)]